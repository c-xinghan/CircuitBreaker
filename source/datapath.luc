module datapath#(
    SLOW_CLOCK_DIV ~ 26 : SLOW_CLOCK_DIV > 0,
    FAST_CLOCK_DIV ~ 21 : FAST_CLOCK_DIV > 0
)(
    input button,
    input clk,  // clock
    input rst,  // reset
    output round_out[32],
    output timer_out[32],
    output sound [32],
    output slow_clock_out,
    
    // debug signals
    output debug_general[32]
) {
    //temp variables
    sig input_alu_a[32]
    sig input_alu_b[32]
    
    alu alu
    .clk(clk){
        counter game_timer_clock(#SIZE(1),#DIV(SLOW_CLOCK_DIV), .rst(rst)) 
        counter fastclock(#SIZE(1),#DIV(FAST_CLOCK_DIV), .rst(rst)) 
        
        // edge detector declaration & connection with counters
        edge_detector edge_detector_game_timer(#RISE(1), #FALL(0), .in(game_timer_clock.value))
        random_number_generator generator(.slow_clk(fastclock.value), .refresh(button))
        
        cu cu(
            .button(button),
            .rst(rst),
            .decrease_timer(edge_detector_game_timer.out)
        )
        
        regfile regfile(
            .we(cu.regfile_we), 
            .wa(cu.regfile_wa), 
            .ra1(cu.regfile_ra1), 
            .rst(rst)
        )
    }
    always {
        // asel mux
        case(cu.asel){
            b00  : input_alu_a = regfile.rd1
            b01  : input_alu_a = b0
            b10  : input_alu_a = b1
            b11  : input_alu_a = generator.out - (generator.out/5) * 5
            default : 
                input_alu_a = 0
        }
        
        // bsel mux
        case(cu.bsel){
            b00 : input_alu_b = b0
            b01 : input_alu_b = b1
            b10 : input_alu_b = b10
            b11 : input_alu_b = 0
            default: //necessary to init
                input_alu_b = 0
            
        }

        // alu
        alu.a = input_alu_a
        alu.b = input_alu_b
        alu.alufn = cu.alufn
        
        // wdsel mux
        case (cu.alu_out_sel){
            b00 : regfile.data = alu.out
            b01 : regfile.data = h28
            b10 : regfile.data = hF
            b11 : regfile.data = h3C
            b100 : regfile.data = c{3d1, 3d2, 3d3, 3d4, 3d5}
            default : 
                regfile.data = alu.out
        }
        
        round_out = regfile.current_round
        timer_out = regfile.current_timer
        sound = regfile.sound
        slow_clock_out = game_timer_clock.value
        debug_general = regfile.debug[2:0]
    }
}