module cu #(
    SLOW_CLOCK_DIV ~ 26 : SLOW_CLOCK_DIV > 0,
    FAST_CLOCK_DIV ~ 21 : FAST_CLOCK_DIV > 0
)(
    input clk,  // clock
    input rst,  // reset
    input decrease_timer,
    input blink_timer1,
    input blink_timer2,
    input blink_timer3,
    input regfile_rd1[32], //direct reading of regfile data from rd2
    input regfile_rd2[32], //direct reading of regfile data from rd2
    
    input button,
    input wires[5],
    input wires_edge[5],
    
    output alufn[6],
    output asel[3],
    output bsel[2],
    output alu_out_sel[2],
    output regfile_wa[5],
    output regfile_ra1[5],
    output regfile_ra2[5],
    output regfile_we,
    output debug[32]
) {
    
    enum GameStates {
        INIT1,
        INIT2,
        INIT3,
        INIT4,
        INIT5,
        PRESS_TO_START,
        YOU_MUST_CONNECT_ZE_WIRES,
        GO_CONNECT_ZE_WIRES,
        RESET_TIMER,
        START_ROUND,
        GET_RANDOM_J,
        INITIALISE_I_SHUFFLE,
        DECREASE_I_SHUFFLE,
        SWAP_WIRES_STEP1,
        SWAP_WIRES_STEP2,
        SWAP_WIRES_STEP3,
        SWAP_WIRES_STEP4,
        CHECK_RANDOM_WIRE,
        BRANCH_RANDOM_WIRE,
        PROCEED_TO_FLASH,
        INCREASE_I_FLASH,
        FLASH_LED_ON,
        FLASH_LED_OFF,
        CHECK_FLASH_LED,
        BRANCH_FLASH_LED,
        SET_TIMER,
        PROCEED_TO_GAME,
        SET_INPROGRESS,
        SET_CORRECT_WIRE,
        IDLE,
        CHECK_TIMER,
        BRANCH_TIMER,
        GAME_OVER,
        GAME_OVER_SET_TIMER,
        DECREASE_TIMER,
        BEEP_BUZZER_ON,
        BEEP_BUZZER_OFF,
        BEEP_BUZZER_OFF_AND_CHECK_WIRE_PULL,
        DECREASE_TIMER_AND_CHECK_WIRE_PULL,
        CHECK_WIRE_PULL_STEP_1,
        CHECK_WIRE_PULL_STEP_2,
        BRANCH_WIRE_PULL,
        BRANCH_WIN_ROUND,
        WIN_ROUND,
        WIN_ROUND_BEEP_ON,
        WIN_ROUND_BEEP_OFF,
        CHECK_WIN_ROUND_BEEP,
        BRANCH_WIN_ROUND_BEEP,
        WIN_ROUND_BEEP_REPEAT,
        DEBUG1,
        DEBUG2,
        DEBUG3,
        DEBUG4,
        DEBUG5
    }
    
    dff fsm[$width(GameStates)](#INIT(GameStates.INIT1), .clk(clk), .rst(rst))
    
    always {
        
        // standard setting unless otherwise overwritten by each case 
        alufn = b011010 // A
        asel = 0 // rd1 output
        bsel = 0 // rd2 output
        regfile_we = 0 // write disabled
        regfile_wa = d8 // temp_1
        regfile_ra1 = d8 // temp_1
        regfile_ra2 = d17 // round_inprogress
        alu_out_sel = b00 // alufn output
        
        debug = b0000
        
        
        fsm.d = fsm.q
        if (rst){
            fsm.d = GameStates.START_ROUND
        }
        else{
            case(fsm.q){
                // initialise default wire 1
                GameStates.INIT1:  
                    asel = b001 // 0
                    bsel = b10 // 1
                    alufn = b000000 // ADD           
                    alu_out_sel = b00
                    regfile_we = 1 
                    regfile_wa = d2 
                    fsm.d = GameStates.INIT2
                
                // initialise default wire 2
                GameStates.INIT2:  
                    regfile_ra1 = d2
                    asel = b000
                    bsel = b10
                    alufn = b000000            
                    alu_out_sel = b00
                    regfile_we = 1 
                    regfile_wa = d3 
                    fsm.d = GameStates.INIT3
                
                // initialise default wire 3
                GameStates.INIT3:  
                    regfile_ra1 = d3
                    asel = b000
                    bsel = b10
                    alufn = b000000            
                    alu_out_sel = b00
                    regfile_we = 1 
                    regfile_wa = d4
                    fsm.d = GameStates.INIT4

                // initialise default wire 4
                GameStates.INIT4:  
                    regfile_ra1 = d4
                    asel = b000
                    bsel = b10
                    alufn = b000000            
                    alu_out_sel = b00
                    regfile_we = 1 
                    regfile_wa = d5  
                    fsm.d = GameStates.INIT5
                
                // initialise default wire 5
                GameStates.INIT5:  
                    regfile_ra1 = d5
                    asel = b000
                    bsel = b10
                    alufn = b000000            
                    alu_out_sel = b00
                    regfile_we = 1 
                    regfile_wa = d6
                    fsm.d = GameStates.PRESS_TO_START
                
                GameStates.PRESS_TO_START:
                    if ((button) && (&wires)){
                        fsm.d = GameStates.RESET_TIMER
                    } else if (button){
                        fsm.d = GameStates.YOU_MUST_CONNECT_ZE_WIRES
                    }
                
                GameStates.YOU_MUST_CONNECT_ZE_WIRES:
                    regfile_ra1 = d12 // led_1 (red)
                    asel = b010 // 1
                    alufn = b011010 // A
                    alu_out_sel = b00 // alu out
                    regfile_we = 1
                    regfile_wa = d12 // led_1 (red)
                    if (blink_timer2){
                        fsm.d = GameStates.GO_CONNECT_ZE_WIRES
                    }
                
                GameStates.GO_CONNECT_ZE_WIRES:
                    regfile_ra1 = d12 // led_1 (red)
                    asel = b001 // 0
                    alufn = b011010 // A
                    alu_out_sel = b00 // alu out
                    regfile_we = 1
                    regfile_wa = d12 // led_1 (red)
                    fsm.d = GameStates.PRESS_TO_START
                
                // reset timer to 0 before starting new round
                GameStates.RESET_TIMER:
                    asel = b01 // 0 
                    alufn = b011010 // A
                    regfile_we = 1
                    regfile_wa  = d1 // seconds_remaining
                    fsm.d = GameStates.START_ROUND
                
                // increment round counter
                GameStates.START_ROUND: 
                    regfile_ra1 = d0
                    asel = b000
                    bsel = b10 // 1
                    alufn = b000000 // ADD              
                    alu_out_sel = b00
                    regfile_we = 1 
                    regfile_wa = d0   
                    fsm.d = GameStates.INITIALISE_I_SHUFFLE
                
                // index I is stored in temp_1. Here it represents the iteration (1-4) for the Fisher-Yates shuffle. 
                GameStates.INITIALISE_I_SHUFFLE:
                    bsel = b11 // 5
                    alufn = b011100 // B              
                    alu_out_sel = b00
                    regfile_we = 1 
                    regfile_wa = d8 // temp_1
                    fsm.d = GameStates.GET_RANDOM_J 
                
                // index J is stored in temp_2. It is a randomly generated number in [1, I].
                GameStates.GET_RANDOM_J:
                    asel = b011 // pn gen output 
                    alufn = b011010 // A            
                    alu_out_sel = b00
                    regfile_we = 1 
                    regfile_wa = d9 // temp_2
                    fsm.d = GameStates.SWAP_WIRES_STEP1
                
                // store wire I in temp_3
                GameStates.SWAP_WIRES_STEP1:
                    regfile_ra2 = d8 // I
                    regfile_ra1 = d1 + regfile_rd2 // wire I
                    asel = b000        
                    alufn = b011010 // A   
                    alu_out_sel = b00
                    regfile_we = 1 
                    regfile_wa = d10 // temp_3 
                    fsm.d = GameStates.SWAP_WIRES_STEP2
                
                // store wire J in temp_4
                GameStates.SWAP_WIRES_STEP2:
                    regfile_ra2 = d9 // J
                    regfile_ra1 = d1 + regfile_rd2 // wire J
                    asel = b000
                    alufn = b011010 // A
                    alu_out_sel = b00
                    regfile_we = 1 
                    regfile_wa = d11 // temp_4 
                    fsm.d = GameStates.SWAP_WIRES_STEP3
                
                // assign wire in temp_3 to wire J
                GameStates.SWAP_WIRES_STEP3:
                    regfile_ra2 = d9 // temp_2
                    regfile_ra1 = d10 // temp_3
                    asel = b000        
                    alufn = b011010 // A   
                    alu_out_sel = b00
                    regfile_we = 1 
                    regfile_wa = d1 + regfile_rd2 
                    fsm.d = GameStates.SWAP_WIRES_STEP4
                
                // assign wire in temp_4 to wire I
                GameStates.SWAP_WIRES_STEP4:
                    regfile_ra2 = d8 // temp_1
                    regfile_ra1 = d11 // temp_4
                    asel = b000        
                    alufn = b011010 // A   
                    alu_out_sel = b00 
                    regfile_we = 1 
                    regfile_wa = d1 + regfile_rd2
                    fsm.d = GameStates.DECREASE_I_SHUFFLE
                
                // decrement index I by 1 
                GameStates.DECREASE_I_SHUFFLE:
                    regfile_ra1 = d8 // temp_1
                    asel = b000 // rd1 output
                    bsel = b10 // 1
                    alufn = b000001 // SUB              
                    alu_out_sel = b00
                    regfile_we = 1 
                    regfile_wa = d8 // temp_1
                    fsm.d = GameStates.CHECK_RANDOM_WIRE 
                
                // checks if index I = 1 and stores the result in temp_3
                GameStates.CHECK_RANDOM_WIRE:
                    regfile_ra1 = d8 // temp_1
                    asel = b000 // rd1 output
                    bsel = b01 // 0
                    alufn = b110011 // CMPEQ   
                    alu_out_sel = b00 
                    regfile_we = 1
                    regfile_wa = d10 // temp_3
                    fsm.d = GameStates.BRANCH_RANDOM_WIRE
                    
                // branches back to decrease_i_shuffle if I > 1, else proceeds forward
                GameStates.BRANCH_RANDOM_WIRE:
                    regfile_ra2 = d10 // temp_3
                    if (regfile_rd2){
                        fsm.d = GameStates.PROCEED_TO_FLASH
                    } else {
                        //fsm.d = GameStates.DEBUG1
                        fsm.d = GameStates.DECREASE_I_SHUFFLE
                    }
                
                // reset temp_1 to 0, proceed to flash LEDs
                GameStates.PROCEED_TO_FLASH:
                    asel = b001 // 0
                    alufn = b011010 // A
                    alu_out_sel = b00 // alu output
                    regfile_we = 1
                    regfile_wa = d8 // temp_1
                    if (blink_timer1){
                        fsm.d = GameStates.INCREASE_I_FLASH
                    }
                
                // index I is stored in temp_1. Here it represents which wire's LED to flash 
                GameStates.INCREASE_I_FLASH:
                    regfile_ra1 = d8 // temp_1
                    asel = b000 // rd1 output
                    bsel = b10 // 1
                    alufn = b000000 // ADD              
                    alu_out_sel = b00
                    regfile_we = 1 
                    regfile_wa = d8 // temp_1
                    fsm.d = GameStates.FLASH_LED_ON
                    
                
                // turn on the LED corresponding to the ith wire
                GameStates.FLASH_LED_ON:
                    regfile_ra2 = d8 // temp_1
                    regfile_ra1 = d1 + regfile_rd2
                    asel = b010 // 1
                    alufn = b011010 // A
                    alu_out_sel = b00
                    regfile_we = 1
                    regfile_wa = d11 + regfile_rd1
                    if (blink_timer1){
                        fsm.d = GameStates.FLASH_LED_OFF
                    }
           
                // turn off the LED corresponding to the ith wire
                GameStates.FLASH_LED_OFF:
                    regfile_ra2 = d8 // temp_1
                    regfile_ra1 = d1 + regfile_rd2
                    asel = b001 // 0
                    alufn = b011010 // A
                    alu_out_sel = b00
                    regfile_we = 1
                    regfile_wa = d11 + regfile_rd1
                    fsm.d = GameStates.CHECK_FLASH_LED
                
                // checks if index I < 5 and stores the result in temp_3
                GameStates.CHECK_FLASH_LED:
                    regfile_ra1 = d8 // temp_1
                    asel = b000 // rd1 output
                    bsel = b11 // 5
                    alufn = b110101 // CMPLT   
                    alu_out_sel = b00
                    regfile_we = 1
                    regfile_wa = d10 // temp_3
                    fsm.d = GameStates.BRANCH_FLASH_LED
                
                // branches back to increase_i_flash if I < 5, else proceeds forward
                GameStates.BRANCH_FLASH_LED:
                    regfile_ra2 = d10 // temp_3
                    if (regfile_rd2){
                        fsm.d = GameStates.INCREASE_I_FLASH
                    } else {
                        fsm.d = GameStates.SET_TIMER
                    }
                
                // sets seconds_remaining to a timer duration hardcoded in alu_out_sel 
                GameStates.SET_TIMER:
                    regfile_ra2 = d0 // round
                    alu_out_sel = regfile_rd2[1:0] // round
                    regfile_we = 1
                    regfile_wa = d1
                    //fsm.d = GameStates.DEBUG1
                    fsm.d = GameStates.PROCEED_TO_GAME
                
                // index I is stored in temp_1. Here it represents (wires cut so far + 1).
                // reset I to 1, proceed to game
                GameStates.PROCEED_TO_GAME:
                    asel = b010 // 1
                    alufn = b011010 // A
                    alu_out_sel = b00 // alu output
                    regfile_we = 1
                    regfile_wa = d8 // temp_1
                    if (blink_timer1){
                        fsm.d = GameStates.SET_INPROGRESS
                    }
                
                // round_inprogress indicates that a round is in progress
                GameStates.SET_INPROGRESS:
                    regfile_ra1 = d17 // round_inprogress
                    asel = b000 // rd1 output
                    alufn = b000010 // NOT
                    alu_out_sel = b00 // alu output
                    regfile_we = 1
                    regfile_wa = d17 // round_inprogress
                    fsm.d = GameStates.SET_CORRECT_WIRE
                                
                // store (correct_wire - 1) in temp_4 where correct_wire = value stored at d1 + i
                GameStates.SET_CORRECT_WIRE:
                    regfile_ra2 = d8 // temp_1
                    regfile_ra1 = d1 + regfile_rd2 // wire_i
                    asel = b000 // rd1 output 
                    bsel = b10 // 1
                    alufn = b000001 // SUB
                    alu_out_sel = b00 // alu output
                    regfile_we = 1
                    regfile_wa = d11 // temp_4
                    fsm.d = GameStates.IDLE
                    
                // wait for decrease_timer or user input
                GameStates.IDLE:
                    // store pulled wire in temp_2
                    asel = b101 // wires_edge
                    alufn = b011010 // A
                    alu_out_sel = b00 // alu output
                    regfile_we = 1
                    regfile_wa = d9 // temp_2
                    if ((decrease_timer) && (wires_edge)){
                        fsm.d = GameStates.DECREASE_TIMER_AND_CHECK_WIRE_PULL
                    } else if (wires_edge){
                        fsm.d = GameStates.CHECK_WIRE_PULL_STEP_1
                    } else if (decrease_timer){
                        fsm.d = GameStates.DECREASE_TIMER
                    }
                
                // decrement seconds_remaining by 1
                GameStates.DECREASE_TIMER_AND_CHECK_WIRE_PULL:
                    regfile_ra1 = d1 // seconds remaining
                    asel = b000 // ra1 output
                    bsel = b10 // 1
                    alufn = b000001 // SUB              
                    alu_out_sel = b00 // alu output
                    regfile_we = 1 
                    regfile_wa = d1 // seconds remaining
                    fsm.d = GameStates.CHECK_WIRE_PULL_STEP_1
                
                // SHR temp_2 by temp_4 bits and store in temp_3. If the correct wire is pulled, temp_3 should be 1.
                GameStates.CHECK_WIRE_PULL_STEP_1:
                    regfile_ra2 = d11 // temp_4
                    regfile_ra1 = d9 // temp_2
                    asel = b000 // rd1 output
                    bsel = b00 // rd2 output
                    alufn = b100001 // SHR
                    alu_out_sel = b00 // alu output
                    regfile_we = 1
                    regfile_wa = d10 // temp_3
                    fsm.d = GameStates.CHECK_WIRE_PULL_STEP_2
                
                // check if temp_3 = 1 and store the result in temp_3
                GameStates.CHECK_WIRE_PULL_STEP_2:
                    regfile_ra1 = d10 // temp_3
                    asel = b000 // rd1 output
                    bsel = b10 // 1
                    alufn = b110011 // CMPEQ
                    alu_out_sel = b00 // alu output
                    regfile_we = 1
                    regfile_wa = d10 // temp_3
                    fsm.d = GameStates.BRANCH_WIRE_PULL
                
                // if wrong wire, trigger game over state. 
                GameStates.BRANCH_WIRE_PULL:
                    regfile_ra2 = d10 // temp_3
                    if (regfile_rd2){
                        regfile_ra1 = d8 // temp_1
                        asel = b000 // rd1 output
                        bsel = b11 // 5
                        alufn = b110011 // CMPEQ
                        alu_out_sel = b00 // alu output
                        regfile_we = 1
                        regfile_wa = d10 // temp_3
                        fsm.d = GameStates.BRANCH_WIN_ROUND
                    } else {
                        fsm.d = GameStates.GAME_OVER_SET_TIMER
                    }
                
                GameStates.BRANCH_WIN_ROUND:
                    regfile_ra2 = d10 // temp_3
                    if (regfile_rd2){
                        // toggle round_inprogress to 0
                        regfile_ra1 = d17 // round_inprogress
                        asel = b000 // rd1 output
                        alufn = b000010 // NOT
                        alu_out_sel = b00 // alu output
                        regfile_we = 1
                        regfile_wa = d17 // round_inprogress
                        fsm.d = GameStates.WIN_ROUND
                    } else {
                        regfile_ra1 = d8 // temp_1
                        asel = b000 // rd1 output
                        bsel = b10 // 1
                        alufn = b000000 // ADD
                        regfile_we = 1 
                        regfile_wa = d8 // temp_1
                        fsm.d = GameStates.SET_CORRECT_WIRE
                    }
                
                // initialise index I (temp_1) to 0. Here, I keeps track of the number of buzzer beeps.
                GameStates.WIN_ROUND:
                    asel = b001 // 0
                    alufn = b011010 // A              
                    alu_out_sel = b00 // alu output
                    regfile_we = 1 
                    regfile_wa = d8 // temp_1
                    fsm.d = GameStates.WIN_ROUND_BEEP_ON
                
                // turn on buzzer
                GameStates.WIN_ROUND_BEEP_ON:
                    asel = b010 // 1
                    alufn = b011010 // A
                    regfile_we = 1 
                    regfile_wa = d7 // buzzer
                    if (blink_timer2){
                        fsm.d = GameStates.WIN_ROUND_BEEP_OFF
                    }
                
                // turn off buzzer
                GameStates.WIN_ROUND_BEEP_OFF:
                    asel = b001 // 0
                    alufn = b011010 // A
                    regfile_we = 1 
                    regfile_wa = d7 // buzzer
                    if (blink_timer1){
                        fsm.d = GameStates.CHECK_WIN_ROUND_BEEP
                    }
                
                // check whether buzzer has beeped 3 times
                GameStates.CHECK_WIN_ROUND_BEEP:
                    regfile_ra1 = d8 // temp_1
                    asel = b000 // rd1 output
                    bsel = b10 // 1
                    alufn = b110111 // CMPLE
                    regfile_we = 1 
                    regfile_wa = d9 // temp_2
                    fsm.d = GameStates.BRANCH_WIN_ROUND_BEEP
                
                // if beeped 3 times, wait to start new round. else, increment I and continue beeping.
                GameStates.BRANCH_WIN_ROUND_BEEP:
                    regfile_ra2 = d9
                    if (regfile_rd2){
                        fsm.d = GameStates.WIN_ROUND_BEEP_REPEAT
                    } else {
                        fsm.d = GameStates.PRESS_TO_START
                    }
                
                // increment I by 1
                GameStates.WIN_ROUND_BEEP_REPEAT:
                    regfile_ra1 = d8 // temp_1
                    asel = b000 // rd1 output
                    bsel = b10 // 1
                    alufn = b000000 // ADD
                    regfile_we = 1 
                    regfile_wa = d8 // temp_1
                    fsm.d = GameStates.WIN_ROUND_BEEP_ON
                
                // check if seconds_remaining < 1 and store the result in temp_3
                GameStates.CHECK_TIMER:
                    regfile_ra1 = d1 // seconds_remaining
                    asel = b000 // rd1 output
                    bsel = b10 // 1
                    alufn = b110101 // CMPLT   
                    alu_out_sel = b00
                    regfile_we = 1
                    regfile_wa = d10 // temp_3
                    fsm.d = GameStates.BRANCH_TIMER
                
                // branch to game_over if seconds_remaining < 1, else branch to decrease_timer
                GameStates.BRANCH_TIMER:
                    regfile_ra2 = d10 // temp_3
                    if (regfile_rd2){
                        fsm.d = GameStates.GAME_OVER
                    } else {
                        fsm.d = GameStates.BEEP_BUZZER_ON
                    }
                
                // set seconds_remaining to 0
                GameStates.GAME_OVER_SET_TIMER:
                    asel = b001 // 0
                    alufn = b011010 // A
                    alu_out_sel = d00 // alu output
                    regfile_we = 1
                    regfile_wa = d1 // seconds_remaining
                    fsm.d = GameStates.GAME_OVER
                
                // endless beep
                GameStates.GAME_OVER:
                    regfile_ra2 = d8 // temp_1
                    regfile_ra1 = d1 + regfile_rd2
                    asel = b010 // 1
                    alufn = b011010 // A
                    alu_out_sel = b00
                    regfile_we = 1
                    regfile_wa = d7 // buzzer                
                    fsm.d = GameStates.GAME_OVER
                
                // decrement seconds_remaining by 1
                GameStates.DECREASE_TIMER:
                    regfile_ra1 = d1 // seconds remaining
                    asel = b000 // ra1 output
                    bsel = b10 // 1
                    alufn = b000001 // SUB              
                    alu_out_sel = b00 // alu output
                    regfile_we = 1 
                    regfile_wa = d1 // seconds remaining
                    fsm.d = GameStates.CHECK_TIMER
                
                // turn on buzzer
                GameStates.BEEP_BUZZER_ON:
                    asel = b010 // 1
                    alufn = b011010 // A
                    regfile_we = 1 
                    regfile_wa = d7 // buzzer
                    if (wires_edge){
                        // store pulled wire in temp_3
                        asel = b101 // wires_edge
                        alufn = b011010 // A
                        alu_out_sel = b00 // alu output
                        regfile_we = 1
                        regfile_wa = d10 // temp_3
                        fsm.d = GameStates.BEEP_BUZZER_OFF_AND_CHECK_WIRE_PULL
                    } else if (blink_timer1){
                        fsm.d = GameStates.BEEP_BUZZER_OFF
                    }
                
                // turn off buzzer
                GameStates.BEEP_BUZZER_OFF:
                    asel = b001 // 0
                    alufn = b011010 // A
                    regfile_we = 1 
                    regfile_wa = d7 // buzzer
                    fsm.d = GameStates.IDLE
                
                // turn off buzzer and check wire pull
                GameStates.BEEP_BUZZER_OFF_AND_CHECK_WIRE_PULL:
                    asel = b001 // 0
                    alufn = b011010 // A
                    regfile_we = 1 
                    regfile_wa = d7 // buzzer
                    fsm.d = GameStates.CHECK_WIRE_PULL_STEP_1
                
                // store signal to be debugged in temp_4
                GameStates.DEBUG1:
                    regfile_ra1 = d2
                    asel = b000        
                    alufn = b011010 // A   
                    alu_out_sel = b00
                    regfile_we = 1 
                    regfile_wa = d11 //temp_4
                    if (button){
                        fsm.d = GameStates.DEBUG2
                    }
                
                GameStates.DEBUG2:
                    regfile_ra1 = d3
                    asel = b000        
                    alufn = b011010 // A   
                    alu_out_sel = b00
                    regfile_we = 1 
                    regfile_wa = d11 //temp_4
                    if (button){
                        fsm.d = GameStates.DEBUG3
                    }
                
                GameStates.DEBUG3:
                    regfile_ra1 = d4
                    asel = b000        
                    alufn = b011010 // A   
                    alu_out_sel = b00
                    regfile_we = 1 
                    regfile_wa = d11 //temp_4
                    if (button){
                        fsm.d = GameStates.DEBUG4
                    }
                
                GameStates.DEBUG4:
                    regfile_ra1 = d5
                    asel = b000        
                    alufn = b011010 // A   
                    alu_out_sel = b00
                    regfile_we = 1 
                    regfile_wa = d11 //temp_4
                    if (button){
                        fsm.d = GameStates.DEBUG5
                    }
                
                GameStates.DEBUG5:
                    regfile_ra1 = d6
                    asel = b000        
                    alufn = b011010 // A   
                    alu_out_sel = b00
                    regfile_we = 1 
                    regfile_wa = d11 //temp_4
                    if (button){
                        fsm.d = GameStates.PROCEED_TO_GAME
                        //fsm.d = GameStates.RESET_I
                    }

            }
            if (regfile_rd2 && wires_edge){
                // store pulled wire in temp_2
                asel = b101 // wires_edge
                alufn = b011010 // A
                alu_out_sel = b00 // alu output
                regfile_we = 1
                regfile_wa = d9 // temp_2
                if (decrease_timer){
                    fsm.d = GameStates.DECREASE_TIMER_AND_CHECK_WIRE_PULL
                } else {
                    fsm.d = GameStates.CHECK_WIRE_PULL_STEP_1
                }
            }
        }
        
    }
}