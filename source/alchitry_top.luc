module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,            // USB->Serial input
    output usb_tx,           // USB->Serial output
    output io_led[3][8],     // LEDs on IO Shield
    output io_segment[8],        // 7-segment LEDs on IO Shield
    output io_select[4],        // Digit select on IO Shield
    input io_button[5],      // 5 buttons on IO Shield
    input io_dip[3][8]       // DIP switches on IO Shield
) {
    
    sig rst                 // reset signal
    const CLK_FREQ = $is_sim() ? 1000 : 100000000 // put 1000 for sim, 100000000 otherwise in hardware
    const SEVEN_SEG_DIV = $is_sim() ? 3 : 16 // put 3 for sim, 16 for hardware
    const SLOW_CLOCK_DIV = $is_sim() ? 9 : 26 // put 9 for sim, 26 for hardware 
    const FAST_CLOCK_DIV = $is_sim() ? 5d7 : 5d25 // put 7 for sim, 21 for hardware 
    const FASTER_CLOCK_DIV = $is_sim() ? 5d6 : 5d24 // put 7 for sim, 21 for hardware 
    const FASTEST_CLOCK_DIV = $is_sim() ? 5d5 : 5d23 // put 7 for sim, 21 for hardware 
    
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond
        edge_detector edge_dt_btn (#RISE(1), #FALL(0))
        button_conditioner btn_cond(#CLK_FREQ(CLK_FREQ))
        edge_detector edge_dt_wire[5](#RISE(5x{{0}}), #FALL(5x{{1}}))
        button_conditioner wire_cond[5](#CLK_FREQ(5x{{CLK_FREQ}}))
        .rst(rst){
            multi_seven_seg seg(#DIV(SEVEN_SEG_DIV), #DIGITS(3))
            datapath datapath(#SLOW_CLOCK_DIV(SLOW_CLOCK_DIV), #FAST_CLOCK_DIV(FAST_CLOCK_DIV), 
                #FASTER_CLOCK_DIV(FASTER_CLOCK_DIV), #FASTEST_CLOCK_DIV(FASTEST_CLOCK_DIV))
        }
    }

    bin_to_dec bin_to_dec_converter(#DIGITS(2))
    bin_to_dec bin_to_dec_converter2(#DIGITS(1))
    
    always {
        //reset_cond.in = ~rst_n  // input raw inverted reset signal
        reset_cond.in = rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
        
        led = 8h00             // turn LEDs off    
        led[1:0] = datapath.round_out[1:0]
        repeat(i, 5, 0, 1) {
            led[i+2] = datapath.led_out[i]
        }
        led[7] = datapath.sound_out
        io_led = 3x{{8b0}}
        io_segment = 8hff          // turn segments off
        io_select = 4hf           // select no digits
        
        usb_tx = usb_rx          // loop serial port

        btn_cond.in = io_button[0] //to reduce the bouncing effects of your button
        edge_dt_btn.in = btn_cond.out //get the edge of button press
        
        wire_cond.in = io_dip[0][4:0]
        edge_dt_wire.in = wire_cond.out
        
        datapath.button = edge_dt_btn.out
        datapath.wires = io_dip[0][4:0]
        datapath.wires_edge = edge_dt_wire.out
        
        //update 7segments
        seg.values = 3x{{4b0}} // default to all 0 first
        bin_to_dec_converter.value = datapath.timer_out
        bin_to_dec_converter2.value = datapath.round_out
        repeat(i, 3, 0, 1) {
            io_led[i] = datapath.debug_general[i]
        }
        //io_led[2] = datapath.led_out[0]
        seg.values = c{bin_to_dec_converter2.digits, bin_to_dec_converter.digits}
        //io_segment = ~seg.seg
        io_segment = seg.seg
        io_select = ~seg.sel
    }
}